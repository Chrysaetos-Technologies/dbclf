// The cmake build only creates libtensorflow_demo.so. In this situation,
// libtensorflow_inference.so will be acquired via the tensorflow.aar dependency.

project.buildDir = 'gradleBuild'
getProject().setBuildDir('gradleBuild')

buildscript {
    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.1'
        classpath 'org.apache.httpcomponents:httpclient:4.5.5'
    }
}

allprojects {
    repositories {
        google()
        maven { url "https://jitpack.io" }
        jcenter()
    }
}

// set to 'cmake', 'none'
// cmake will only build for armabi-v7a
def nativeBuildSystem = 'cmake'

// Controls output directory in APK and CPU type for Bazel builds.
// The CMake build has only been tested with armeabi-v7a; others may not work.
def cpuType = 'armeabi-v7a'

// Output directory in the local directory for packaging into the APK.
def nativeOutDir = 'libs/' + cpuType

// Default to building with cmake and override if requested.
def nativeBuildRule = 'cmake'
def inferenceLibPath = '../../../bazel-bin/tensorflow/contrib/android/libtensorflow_inference.so'

// import DownloadModels task
project.ext.ASSET_DIR = projectDir.toString() + '/assets'
project.ext.TMP_DIR = project.buildDir.toString() + '/downloads'

apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {
        applicationId = 'com.jstappdev.dbclf'
        minSdkVersion 21
        targetSdkVersion 28

        versionCode 63
        versionName "31"
    }

    if (nativeBuildSystem == 'cmake') {
        defaultConfig {

            ndk {
                abiFilters "${cpuType}"
            }
        }
    }

    lintOptions {
        abortOnError false
    }

    sourceSets {
        main {
            java {
                srcDir 'src'
            }

            manifest.srcFile 'AndroidManifest.xml'
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = [project.ext.ASSET_DIR]
            jniLibs.srcDirs = ['libs']
        }

        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
}

task copyNativeLibs(type: Copy) {
    from inferenceLibPath
    into nativeOutDir
    duplicatesStrategy = 'include'
    dependsOn nativeBuildRule
    fileMode 0644
}

dependencies {
    implementation 'org.tensorflow:tensorflow-android:1.8.0'
    implementation 'com.github.PhilJay:MPAndroidChart:v3.0.3'
    implementation 'com.android.support:support-v4:28.0.0'
}
